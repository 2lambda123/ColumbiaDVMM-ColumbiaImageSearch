# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hasher_obj_py', [dirname(__file__)])
        except ImportError:
            import _hasher_obj_py
            return _hasher_obj_py
        if fp is not None:
            try:
                _mod = imp.load_module('_hasher_obj_py', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hasher_obj_py = swig_import_helper()
    del swig_import_helper
else:
    import _hasher_obj_py
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hasher_obj_py.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _hasher_obj_py.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _hasher_obj_py.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _hasher_obj_py.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _hasher_obj_py.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _hasher_obj_py.SwigPyIterator_equal(self, x)

    def copy(self):
        return _hasher_obj_py.SwigPyIterator_copy(self)

    def next(self):
        return _hasher_obj_py.SwigPyIterator_next(self)

    def __next__(self):
        return _hasher_obj_py.SwigPyIterator___next__(self)

    def previous(self):
        return _hasher_obj_py.SwigPyIterator_previous(self)

    def advance(self, n):
        return _hasher_obj_py.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _hasher_obj_py.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _hasher_obj_py.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _hasher_obj_py.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _hasher_obj_py.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _hasher_obj_py.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _hasher_obj_py.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _hasher_obj_py.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class PairF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairF, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hasher_obj_py.new_PairF(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["first"] = _hasher_obj_py.PairF_first_set
    __swig_getmethods__["first"] = _hasher_obj_py.PairF_first_get
    if _newclass:
        first = _swig_property(_hasher_obj_py.PairF_first_get, _hasher_obj_py.PairF_first_set)
    __swig_setmethods__["second"] = _hasher_obj_py.PairF_second_set
    __swig_getmethods__["second"] = _hasher_obj_py.PairF_second_get
    if _newclass:
        second = _swig_property(_hasher_obj_py.PairF_second_get, _hasher_obj_py.PairF_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _hasher_obj_py.delete_PairF
    __del__ = lambda self: None
PairF_swigregister = _hasher_obj_py.PairF_swigregister
PairF_swigregister(PairF)

class InnerResVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InnerResVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InnerResVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hasher_obj_py.InnerResVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hasher_obj_py.InnerResVector___nonzero__(self)

    def __bool__(self):
        return _hasher_obj_py.InnerResVector___bool__(self)

    def __len__(self):
        return _hasher_obj_py.InnerResVector___len__(self)

    def __getslice__(self, i, j):
        return _hasher_obj_py.InnerResVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hasher_obj_py.InnerResVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hasher_obj_py.InnerResVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hasher_obj_py.InnerResVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hasher_obj_py.InnerResVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hasher_obj_py.InnerResVector___setitem__(self, *args)

    def pop(self):
        return _hasher_obj_py.InnerResVector_pop(self)

    def append(self, x):
        return _hasher_obj_py.InnerResVector_append(self, x)

    def empty(self):
        return _hasher_obj_py.InnerResVector_empty(self)

    def size(self):
        return _hasher_obj_py.InnerResVector_size(self)

    def swap(self, v):
        return _hasher_obj_py.InnerResVector_swap(self, v)

    def begin(self):
        return _hasher_obj_py.InnerResVector_begin(self)

    def end(self):
        return _hasher_obj_py.InnerResVector_end(self)

    def rbegin(self):
        return _hasher_obj_py.InnerResVector_rbegin(self)

    def rend(self):
        return _hasher_obj_py.InnerResVector_rend(self)

    def clear(self):
        return _hasher_obj_py.InnerResVector_clear(self)

    def get_allocator(self):
        return _hasher_obj_py.InnerResVector_get_allocator(self)

    def pop_back(self):
        return _hasher_obj_py.InnerResVector_pop_back(self)

    def erase(self, *args):
        return _hasher_obj_py.InnerResVector_erase(self, *args)

    def __init__(self, *args):
        this = _hasher_obj_py.new_InnerResVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _hasher_obj_py.InnerResVector_push_back(self, x)

    def front(self):
        return _hasher_obj_py.InnerResVector_front(self)

    def back(self):
        return _hasher_obj_py.InnerResVector_back(self)

    def assign(self, n, x):
        return _hasher_obj_py.InnerResVector_assign(self, n, x)

    def resize(self, *args):
        return _hasher_obj_py.InnerResVector_resize(self, *args)

    def insert(self, *args):
        return _hasher_obj_py.InnerResVector_insert(self, *args)

    def reserve(self, n):
        return _hasher_obj_py.InnerResVector_reserve(self, n)

    def capacity(self):
        return _hasher_obj_py.InnerResVector_capacity(self)
    __swig_destroy__ = _hasher_obj_py.delete_InnerResVector
    __del__ = lambda self: None
InnerResVector_swigregister = _hasher_obj_py.InnerResVector_swigregister
InnerResVector_swigregister(InnerResVector)

class ResVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hasher_obj_py.ResVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hasher_obj_py.ResVector___nonzero__(self)

    def __bool__(self):
        return _hasher_obj_py.ResVector___bool__(self)

    def __len__(self):
        return _hasher_obj_py.ResVector___len__(self)

    def __getslice__(self, i, j):
        return _hasher_obj_py.ResVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hasher_obj_py.ResVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hasher_obj_py.ResVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hasher_obj_py.ResVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hasher_obj_py.ResVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hasher_obj_py.ResVector___setitem__(self, *args)

    def pop(self):
        return _hasher_obj_py.ResVector_pop(self)

    def append(self, x):
        return _hasher_obj_py.ResVector_append(self, x)

    def empty(self):
        return _hasher_obj_py.ResVector_empty(self)

    def size(self):
        return _hasher_obj_py.ResVector_size(self)

    def swap(self, v):
        return _hasher_obj_py.ResVector_swap(self, v)

    def begin(self):
        return _hasher_obj_py.ResVector_begin(self)

    def end(self):
        return _hasher_obj_py.ResVector_end(self)

    def rbegin(self):
        return _hasher_obj_py.ResVector_rbegin(self)

    def rend(self):
        return _hasher_obj_py.ResVector_rend(self)

    def clear(self):
        return _hasher_obj_py.ResVector_clear(self)

    def get_allocator(self):
        return _hasher_obj_py.ResVector_get_allocator(self)

    def pop_back(self):
        return _hasher_obj_py.ResVector_pop_back(self)

    def erase(self, *args):
        return _hasher_obj_py.ResVector_erase(self, *args)

    def __init__(self, *args):
        this = _hasher_obj_py.new_ResVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _hasher_obj_py.ResVector_push_back(self, x)

    def front(self):
        return _hasher_obj_py.ResVector_front(self)

    def back(self):
        return _hasher_obj_py.ResVector_back(self)

    def assign(self, n, x):
        return _hasher_obj_py.ResVector_assign(self, n, x)

    def resize(self, *args):
        return _hasher_obj_py.ResVector_resize(self, *args)

    def insert(self, *args):
        return _hasher_obj_py.ResVector_insert(self, *args)

    def reserve(self, n):
        return _hasher_obj_py.ResVector_reserve(self, n)

    def capacity(self):
        return _hasher_obj_py.ResVector_capacity(self)
    __swig_destroy__ = _hasher_obj_py.delete_ResVector
    __del__ = lambda self: None
ResVector_swigregister = _hasher_obj_py.ResVector_swigregister
ResVector_swigregister(ResVector)

class HasherObjectPy(_object):
    """Proxy of C++ HasherObjectPy class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HasherObjectPy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HasherObjectPy, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(HasherObjectPy self) -> HasherObjectPy"""
        this = _hasher_obj_py.new_HasherObjectPy()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hasher_obj_py.delete_HasherObjectPy
    __del__ = lambda self: None

    def initialize(self):
        """initialize(HasherObjectPy self) -> int"""
        return _hasher_obj_py.HasherObjectPy_initialize(self)


    def read_update_files(self):
        """read_update_files(HasherObjectPy self) -> int"""
        return _hasher_obj_py.HasherObjectPy_read_update_files(self)


    def load_hashcodes(self):
        """load_hashcodes(HasherObjectPy self) -> int"""
        return _hasher_obj_py.HasherObjectPy_load_hashcodes(self)


    def load_itq_model(self):
        """load_itq_model(HasherObjectPy self) -> int"""
        return _hasher_obj_py.HasherObjectPy_load_itq_model(self)


    def set_query_feats_from_disk(self, filename):
        """set_query_feats_from_disk(HasherObjectPy self, std::string filename)"""
        return _hasher_obj_py.HasherObjectPy_set_query_feats_from_disk(self, filename)


    def find_knn(self):
        """find_knn(HasherObjectPy self)"""
        return _hasher_obj_py.HasherObjectPy_find_knn(self)


    def find_knn_nodiskout(self):
        """find_knn_nodiskout(HasherObjectPy self) -> vector< vector< pair< float,int > > >"""
        return _hasher_obj_py.HasherObjectPy_find_knn_nodiskout(self)


    def set_paths(self):
        """set_paths(HasherObjectPy self)"""
        return _hasher_obj_py.HasherObjectPy_set_paths(self)


    def set_topk(self, _top_k):
        """set_topk(HasherObjectPy self, int _top_k)"""
        return _hasher_obj_py.HasherObjectPy_set_topk(self, _top_k)


    def set_ratio(self, _ratio):
        """set_ratio(HasherObjectPy self, float _ratio)"""
        return _hasher_obj_py.HasherObjectPy_set_ratio(self, _ratio)


    def set_bit_num(self, _bit_num):
        """set_bit_num(HasherObjectPy self, int _bit_num)"""
        return _hasher_obj_py.HasherObjectPy_set_bit_num(self, _bit_num)


    def set_norm(self, _norm):
        """set_norm(HasherObjectPy self, int _norm)"""
        return _hasher_obj_py.HasherObjectPy_set_norm(self, _norm)


    def set_feature_dim(self, _feature_dim):
        """set_feature_dim(HasherObjectPy self, int _feature_dim)"""
        return _hasher_obj_py.HasherObjectPy_set_feature_dim(self, _feature_dim)


    def set_base_modelpath(self, _base_modelpath):
        """set_base_modelpath(HasherObjectPy self, std::string _base_modelpath)"""
        return _hasher_obj_py.HasherObjectPy_set_base_modelpath(self, _base_modelpath)


    def get_base_modelpath(self):
        """get_base_modelpath(HasherObjectPy self) -> std::string"""
        return _hasher_obj_py.HasherObjectPy_get_base_modelpath(self)


    def set_base_updatepath(self, _base_updatepath):
        """set_base_updatepath(HasherObjectPy self, std::string _base_updatepath)"""
        return _hasher_obj_py.HasherObjectPy_set_base_updatepath(self, _base_updatepath)


    def get_base_updatepath(self):
        """get_base_updatepath(HasherObjectPy self) -> std::string"""
        return _hasher_obj_py.HasherObjectPy_get_base_updatepath(self)


    def set_outputfile(self, _outname):
        """set_outputfile(HasherObjectPy self, std::string _outname)"""
        return _hasher_obj_py.HasherObjectPy_set_outputfile(self, _outname)

HasherObjectPy_swigregister = _hasher_obj_py.HasherObjectPy_swigregister
HasherObjectPy_swigregister(HasherObjectPy)

# This file is compatible with both classic and new-style classes.


